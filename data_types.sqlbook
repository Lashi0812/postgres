-- SQLBook: Markup
## Boolean

TRUE    FALSE
----    -----
TRUE    FALSE
'true'  'false'
't'     'f'
'yes'   'no'
'y'     'n'
'1'     '0'
-- SQLBook: Code
-- Active: 1728889588376@@127.0.0.1@5432@learning
CREATE Table table_boolean(
    product_id SERIAL PRIMARY KEY,
    is_available BOOLEAN NOT NULL
);
-- SQLBook: Code
INSERT INTO table_boolean (is_available) VALUES ('true');
-- SQLBook: Code
SELECT * FROM table_boolean
-- SQLBook: Code
INSERT INTO table_boolean (is_available) VALUES ('yes'),('y'),('1');
-- SQLBook: Code
SELECT * FROM table_boolean
-- SQLBook: Code
INSERT INTO table_boolean (is_available) VALUES ('false'),('f'),('no'),('n'),('0');
-- SQLBook: Code
SELECT * FROM table_boolean;
-- SQLBook: Code
-- Active: 1728889588376@@127.0.0.1@5432@learning@public
SELECT * FROM table_boolean
WHERE is_available = TRUE
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE is_available = '1'
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE is_available = '0'
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE is_available = 'f'
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE is_available = 'n'
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE NOT is_available = 'n'
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE NOT is_available
-- SQLBook: Code
SELECT * FROM table_boolean
WHERE is_available
-- SQLBook: Code
ALTER TABLE table_boolean 
ALTER COLUMN is_available 
SET DEFAULT true;
-- SQLBook: Markup
## Character data types

- CHAR, VARCHAR, TEXT

Character Type                             Notes
---------------------                   -----------
CHARACTER(n),CHAR(n)                    Fixed-length character string with blank padding
CHaracter varying(n),VARCHAR(n)         Variable-length character with length limit without blank
TEXT,VARCHAR                            Variable unlimited-length character string
-- SQLBook: Code
SELECT CAST('Adam' AS CHARACTER(10)) as "NAME";

-- "Adam      "
-- SQLBook: Code
SELECT 'Adam'::char(10) as "Name";
-- "Adam      "
-- SQLBook: Code
SELECT 
    CAST('Adam' AS CHARACTER(10)) as "NAME1",
    'Adam'::char(10) as "Name2";

-- "Adam      	"Adam      "
-- SQLBook: Code
SELECT 
    CAST('Adam' AS VARCHAR(10)) as "NAME1",
    'Adam'::char(10) as "Name2";

-- Adam	"Adam      "
-- SQLBook: Code
SELECT 'Humanity is an illusion.As long as you love humans, so long as you love yourself, humanity will never be the same again.'::text;
-- SQLBook: Markup
## Number

- smallint,integer,bigint
- database will give error if you try to store a number larger than range
- auto increment integer data type : SERIAL
  - smallserial,serial,bigserial
- numeric(precision,scale)
-- SQLBook: Code
CREATE TABLE table_numbers(
    col_numeric NUMERIC(20,5),
    col_real REAL,
    col_double_precision DOUBLE PRECISION
);
-- SQLBook: Code
SELECT * FROM table_numbers;
-- SQLBook: Code
-- Active: 1728889588376@@127.0.0.1@5432@learning@public
INSERT INTO table_numbers (col_numeric,col_real,col_double_precision)
VALUES
    (.9,.9,.9),
    (3.13579,3.13579,3.13579),
    (4.1357987654,4.1357987654,4.1357987654);

-- 0.90000	0.9	0.9
-- 3.13579	3.13579	3.13579
-- 4.13580	4.135799	4.1357987654
-- SQLBook: Code
SELECT * FROM table_numbers;
-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code

-- SQLBook: Code
